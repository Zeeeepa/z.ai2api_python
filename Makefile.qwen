.PHONY: help install run test docker-build docker-up docker-down docker-logs clean flareprox-setup

# Colors for terminal output
GREEN  := \033[0;32m
YELLOW := \033[0;33m
RED    := \033[0;31m
RESET  := \033[0m

help:
	@echo "$(GREEN)Qwen Standalone Server - Makefile Commands$(RESET)"
	@echo ""
	@echo "$(YELLOW)Development:$(RESET)"
	@echo "  make install          Install dependencies with pip"
	@echo "  make run              Run server directly with Python"
	@echo "  make test             Run test suite"
	@echo "  make test-quick       Run quick test (3 models)"
	@echo ""
	@echo "$(YELLOW)Docker:$(RESET)"
	@echo "  make docker-build     Build Docker image"
	@echo "  make docker-up        Start Docker container"
	@echo "  make docker-down      Stop Docker container"
	@echo "  make docker-logs      View Docker logs"
	@echo "  make docker-restart   Restart Docker container"
	@echo ""
	@echo "$(YELLOW)FlareProx:$(RESET)"
	@echo "  make flareprox-setup  Setup FlareProx configuration"
	@echo "  make flareprox-create Create proxy workers"
	@echo "  make flareprox-list   List active workers"
	@echo "  make flareprox-test   Test workers"
	@echo "  make flareprox-clean  Remove all workers"
	@echo ""
	@echo "$(YELLOW)Utility:$(RESET)"
	@echo "  make clean            Clean temporary files"
	@echo "  make health           Check server health"
	@echo "  make models           List available models"

install:
	@echo "$(GREEN)Installing dependencies...$(RESET)"
	pip install -e .
	pip install uvicorn[standard]
	@echo "$(GREEN)✅ Installation complete$(RESET)"

run:
	@echo "$(GREEN)Starting Qwen server...$(RESET)"
	python qwen_server.py

test:
	@echo "$(GREEN)Running comprehensive test suite...$(RESET)"
	python test_qwen_server.py

test-quick:
	@echo "$(GREEN)Running quick test...$(RESET)"
	python test_qwen_server.py --quick

docker-build:
	@echo "$(GREEN)Building Docker image...$(RESET)"
	docker build -f Dockerfile.qwen -t qwen-api:latest .
	@echo "$(GREEN)✅ Docker image built$(RESET)"

docker-up:
	@echo "$(GREEN)Starting Docker container...$(RESET)"
	docker-compose -f docker-compose.qwen.yml up -d
	@echo "$(GREEN)✅ Container started$(RESET)"
	@echo "$(YELLOW)View logs: make docker-logs$(RESET)"

docker-down:
	@echo "$(YELLOW)Stopping Docker container...$(RESET)"
	docker-compose -f docker-compose.qwen.yml down
	@echo "$(GREEN)✅ Container stopped$(RESET)"

docker-logs:
	docker-compose -f docker-compose.qwen.yml logs -f

docker-restart:
	@echo "$(YELLOW)Restarting Docker container...$(RESET)"
	docker-compose -f docker-compose.qwen.yml restart
	@echo "$(GREEN)✅ Container restarted$(RESET)"

flareprox-setup:
	@echo "$(GREEN)Setting up FlareProx...$(RESET)"
	python flareprox.py config

flareprox-create:
	@echo "$(GREEN)Creating proxy workers...$(RESET)"
	python flareprox.py create --count 3

flareprox-list:
	@echo "$(GREEN)Listing proxy workers...$(RESET)"
	python flareprox.py list

flareprox-test:
	@echo "$(GREEN)Testing proxy workers...$(RESET)"
	python flareprox.py test

flareprox-clean:
	@echo "$(YELLOW)Cleaning up proxy workers...$(RESET)"
	python flareprox.py cleanup

clean:
	@echo "$(YELLOW)Cleaning temporary files...$(RESET)"
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	rm -rf build/ dist/ .pytest_cache/ 2>/dev/null || true
	@echo "$(GREEN)✅ Cleanup complete$(RESET)"

health:
	@echo "$(GREEN)Checking server health...$(RESET)"
	@curl -s http://localhost:8081/health | python -m json.tool

models:
	@echo "$(GREEN)Listing available models...$(RESET)"
	@curl -s http://localhost:8081/v1/models | python -m json.tool

# Quick start shortcuts
start: docker-up
stop: docker-down
restart: docker-restart
logs: docker-logs

